import{_ as e,o as a,c as s,R as l}from"./chunks/framework.896e1521.js";const y=JSON.parse('{"title":"Props","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"props.md","filePath":"props.md"}'),o={name:"props.md"},n=l(`<h1 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h1><h2 id="布局类" tabindex="-1">布局类 <a class="header-anchor" href="#布局类" aria-label="Permalink to &quot;布局类&quot;">​</a></h2><h3 id="height" tabindex="-1">height <a class="header-anchor" href="#height" aria-label="Permalink to &quot;height&quot;">​</a></h3><ul><li>type: <code>string | number</code></li><li>default: <code>null</code></li></ul><p>优先级<strong>最高</strong>，设置整体布局高度，包含顶部标题栏、搜索栏、正文区域、页码区域所有内容的高度，支持百分比。</p><h3 id="fullheight" tabindex="-1">fullHeight <a class="header-anchor" href="#fullheight" aria-label="Permalink to &quot;fullHeight&quot;">​</a></h3><ul><li>type: <code>boolean</code></li><li>default: <code>true</code></li></ul><p>垂直高度是否铺满屏幕高度。</p><h3 id="headertitle" tabindex="-1">headerTitle <a class="header-anchor" href="#headertitle" aria-label="Permalink to &quot;headerTitle&quot;">​</a></h3><ul><li>type: <code>string</code></li><li>default: <code>&#39;&#39;</code></li></ul><p>设置页面顶部通栏内的页面标题文本。</p><h3 id="headernav" tabindex="-1">headerNav <a class="header-anchor" href="#headernav" aria-label="Permalink to &quot;headerNav&quot;">​</a></h3><ul><li>type: <code>(string | { text: string; to?: string })[]</code></li><li>default: <code>[]</code></li></ul><p>设置页面顶部通栏内的面包屑，子项可为字符串或 object ， object 支持属性有：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>text</code></td><td>显示文字</td></tr><tr><td><code>to</code></td><td>可选，路由跳转对象，同 vue-router 的 <code>to</code></td></tr></tbody></table><h3 id="contentmessage" tabindex="-1">contentMessage <a class="header-anchor" href="#contentmessage" aria-label="Permalink to &quot;contentMessage&quot;">​</a></h3><ul><li>type: <code>string | { type: &#39;warning&#39; | &#39;info&#39; | &#39;error&#39;; text: string }</code></li><li>default: <code>null</code></li></ul><p>可用在 <a href="#autoload">autoload</a> 为 <code>false</code> 时候，初始显示的提示信息。</p><p>传入 <code>string</code> 类型则不带图标只显示文本。传入 <code>Object</code> 类型支持通过 <code>type</code> 属性指定内置图标。</p><h2 id="搜索栏" tabindex="-1">搜索栏 <a class="header-anchor" href="#搜索栏" aria-label="Permalink to &quot;搜索栏&quot;">​</a></h2><h3 id="filterbuttons" tabindex="-1">filterButtons <a class="header-anchor" href="#filterbuttons" aria-label="Permalink to &quot;filterButtons&quot;">​</a></h3><p>搜索栏左侧按钮配置，具体可查看 <a href="./prop-filter-buttons.html">Prop filterButtons</a> 。</p><h3 id="filterfields" tabindex="-1">filterFields <a class="header-anchor" href="#filterfields" aria-label="Permalink to &quot;filterFields&quot;">​</a></h3><p>搜索栏搜索字段配置，具体可查看 <a href="./prop-filter-fields.html">Prop filterFields</a> 。</p><h3 id="filtermodel" tabindex="-1">filterModel <a class="header-anchor" href="#filtermodel" aria-label="Permalink to &quot;filterModel&quot;">​</a></h3><ul><li>type: <code>Object</code></li><li>default: <code>{}</code></li></ul><p>可选，存储搜索栏的搜索条件值。如果有需要跟随请求直接发送的数据也可在此设置，以实现类似“隐藏域”的提交效果。</p><div class="warning custom-block"><p class="custom-block-title">有效值过滤</p><p>注意，提交时只会对内部<strong>有效值</strong>进行提交，会过滤掉以下内容的参数值： <code>&#39;&#39;</code> , <code>null</code> , <code>undefined</code> , <code>[]</code> , <code>{}</code> 。</p></div><h3 id="searchbutton" tabindex="-1">searchButton <a class="header-anchor" href="#searchbutton" aria-label="Permalink to &quot;searchButton&quot;">​</a></h3><ul><li>type: <code>boolean | { text: string; attrs?: ElementPlusButtonProps }</code></li></ul><p>传入 <code>false</code> 可隐藏显示搜索栏的“搜索”按钮。</p><p>传入对象类型配置，可通过 <code>attrs</code> 设置所有 <code>&lt;el-button&gt;</code> props 。</p><h3 id="resetbutton" tabindex="-1">resetButton <a class="header-anchor" href="#resetbutton" aria-label="Permalink to &quot;resetButton&quot;">​</a></h3><ul><li>type: <code>boolean | { text: string; attrs?: ElementPlusButtonProps }</code></li></ul><p>传入 <code>false</code> 可隐藏显示搜索栏的“重置”按钮。</p><p>传入对象类型配置，可通过 <code>attrs</code> 设置所有 <code>&lt;el-button&gt;</code> props 。</p><h2 id="内容区域-表格" tabindex="-1">内容区域/表格 <a class="header-anchor" href="#内容区域-表格" aria-label="Permalink to &quot;内容区域/表格&quot;">​</a></h2><h3 id="tablecolumns" tabindex="-1">tableColumns <a class="header-anchor" href="#tablecolumns" aria-label="Permalink to &quot;tableColumns&quot;">​</a></h3><p>表格列配置，具体可查看 <a href="./prop-table-columns.html">Prop tableColumns</a>。</p><h3 id="tableselectioncolumn" tabindex="-1">tableSelectionColumn <a class="header-anchor" href="#tableselectioncolumn" aria-label="Permalink to &quot;tableSelectionColumn&quot;">​</a></h3><ul><li>type: <code>boolean | &#39;single&#39; | { type?: string; selectable?: (row, index) =&gt; boolean }</code></li><li>default: <code>true</code></li></ul><p>是否开启表格行选择功能。传入 <code>&#39;single&#39;</code> 为表格单选效果。如果需要禁用部分行的可选状态，可传入 <code>selectable</code> 属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">tableSelectionColumn</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 不传该属性默认为多选</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">single</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 用法与 &lt;el-table-column /&gt; 的 selectable 一致，返回 false 表示当行不可选择</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">selectable</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">row</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="selection" tabindex="-1">selection <a class="header-anchor" href="#selection" aria-label="Permalink to &quot;selection&quot;">​</a></h3><ul><li>type: <code>object[]</code></li><li>default: <code>[]</code></li></ul><p>表格行选择的选中数据。可通过 <code>v-model</code> 获取更新：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">listview</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">selection</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">selection</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h3 id="contentattrs" tabindex="-1">contentAttrs <a class="header-anchor" href="#contentattrs" aria-label="Permalink to &quot;contentAttrs&quot;">​</a></h3><ul><li>type: <code>Object</code></li><li>default: <code>{}</code></li></ul><p>内部通过 <code>v-bind</code> 传递给 <code>&lt;el-table&gt;</code> 元素，因此支持传入 <a href="https://element-plus.org/zh-CN/component/table.html" target="_blank" rel="noreferrer">Element Plus table</a> 的所有属性及事件。</p><h2 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h2><h3 id="usepage" tabindex="-1">usePage <a class="header-anchor" href="#usepage" aria-label="Permalink to &quot;usePage&quot;">​</a></h3><ul><li>type: <code>boolean | { pageIndex: string; pageSize: string }</code></li><li>default: <code>{ pageIndex: &#39;page_index&#39;, pageSize: &#39;page_size&#39; }</code></li></ul><p>传入 <code>false</code> 可关闭底部分页功能。开启分页时请求参数上除了包含搜索栏内的数据，还会自动附加上 <code>page_index</code> 和 <code>page_size</code> 2 个参数。</p><p>可以通过传入 <code>Object</code> 类型自定义接口分页参数名称。</p><h3 id="pagesize" tabindex="-1">pageSize <a class="header-anchor" href="#pagesize" aria-label="Permalink to &quot;pageSize&quot;">​</a></h3><ul><li>type: <code>number</code></li><li>default: <code>20</code></li></ul><p>默认每页分页数量。</p><h3 id="pagesizes" tabindex="-1">pageSizes <a class="header-anchor" href="#pagesizes" aria-label="Permalink to &quot;pageSizes&quot;">​</a></h3><ul><li>type: <code>number[]</code></li><li>default: <code>[20, 50, 100]</code></li></ul><p>分页“每页数量”可选值。</p><h3 id="pageposition" tabindex="-1">pagePosition <a class="header-anchor" href="#pageposition" aria-label="Permalink to &quot;pagePosition&quot;">​</a></h3><ul><li>type: <code>&#39;left&#39; | &#39;right&#39;</code></li><li>default: <code>&#39;left&#39;</code></li></ul><p>设置页码位置。注意底部若有设置 <a href="./slots.html#footer-right">slots</a> 会覆盖页码组件。</p><h3 id="pageattrs" tabindex="-1">pageAttrs <a class="header-anchor" href="#pageattrs" aria-label="Permalink to &quot;pageAttrs&quot;">​</a></h3><ul><li>type: <code>Object</code></li><li>default: <code>{}</code></li></ul><p>支持除 <code>total</code> 和 <code>currentPage</code> 及其更新事件之外的所有 <a href="https://element-plus.org/zh-CN/component/pagination.html" target="_blank" rel="noreferrer"><code>&lt;el-pagination&gt;</code></a> 属性。</p><h2 id="数据请求" tabindex="-1">数据请求 <a class="header-anchor" href="#数据请求" aria-label="Permalink to &quot;数据请求&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>内部依赖 <a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">axios</a> 作为请求基础方法。</p><p>每次发起请求会自动将 <a href="#filtermodel">filterModel</a> 中的数据作为参数提交。</p><p>默认开启 <code>withCredentials: true</code> ，如需关闭请配置 <a href="#requestconfig">requestConfig</a> 。</p></div><h3 id="autoload" tabindex="-1">autoload <a class="header-anchor" href="#autoload" aria-label="Permalink to &quot;autoload&quot;">​</a></h3><ul><li>type: <code>boolean</code></li><li>default: <code>true</code></li></ul><p>初始化后是否自动加载第一页内容。</p><h3 id="requesturl" tabindex="-1">requestUrl <a class="header-anchor" href="#requesturl" aria-label="Permalink to &quot;requestUrl&quot;">​</a></h3><ul><li>type: <code>string</code></li><li>default: <code>&#39;&#39;</code></li></ul><p>数据请求接口地址。</p><h3 id="requestmethod" tabindex="-1">requestMethod <a class="header-anchor" href="#requestmethod" aria-label="Permalink to &quot;requestMethod&quot;">​</a></h3><ul><li>type: <code>string</code></li><li>default: <code>post</code></li></ul><h3 id="requestconfig" tabindex="-1">requestConfig <a class="header-anchor" href="#requestconfig" aria-label="Permalink to &quot;requestConfig&quot;">​</a></h3><ul><li>type: <code>Object</code></li><li>default: <code>{}</code></li></ul><p>Axios <a href="https://github.com/axios/axios#request-config" target="_blank" rel="noreferrer">Request Config</a>。</p><h3 id="contentdatamap" tabindex="-1">contentDataMap <a class="header-anchor" href="#contentdatamap" aria-label="Permalink to &quot;contentDataMap&quot;">​</a></h3><ul><li>type: <code>{ items: string; total: string }</code></li><li>default: <code>{ items: &#39;result.items&#39;, total: &#39;result.total_count&#39; }</code></li></ul><p>数据接口响应内容属性映射。可以直接配置各属性相对于接口响应数据的取值路径来直接映射返回值。默认会有表格视图所需的 2 个属性映射 <code>items</code> （表格数据） 和 <code>total</code> 用于分页组件。</p><p>在发起请求并判断接口获取成功（<a href="#validateresponse"><code>validateResponse</code></a> 方法验证通过）后：</p><ul><li>【默认表格样式】会分别在表格数据和分页组件使用 <code>items</code> 和 <code>total</code> 2 个属性。 <ul><li><code>&lt;el-table :data=&quot;contentData.items&quot; /&gt;</code></li><li><code>&lt;el-pagination :total=&quot;contentData.total&quot; /&gt;</code></li></ul></li><li>【自定义 slot 】数据挂载在 slot-scope 的 <code>content-data</code> 属性上。</li><li><strong>如果 <code>contentDataMap</code> 设置为 <code>null</code> ，则不进行映射处理，直接返回接口响应数据。</strong></li></ul><p>例如：有接口响应为</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">is_success</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">errorInfos</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">result</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">items</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">total</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>通过映射表配置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">items</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">result.items</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">total</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">result.total</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">errorInfos</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">errorInfos</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>可得到：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">items</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">total</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">errorInfos</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><h3 id="validateresponse" tabindex="-1">validateResponse <a class="header-anchor" href="#validateresponse" aria-label="Permalink to &quot;validateResponse&quot;">​</a></h3><ul><li>type: <code>() =&gt; boolean</code></li><li>default: <code>null</code></li></ul><p>验证接口响应是否成功。若接口响应格式字段有差异，可修改该配置。</p><p>例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">is_success</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="resolveresponseerrormessage" tabindex="-1">resolveResponseErrorMessage <a class="header-anchor" href="#resolveresponseerrormessage" aria-label="Permalink to &quot;resolveResponseErrorMessage&quot;">​</a></h3><ul><li>type: <code>(res) =&gt; string</code></li><li>default: <code>null</code></li></ul><p>在 <code>validateResponse</code> 返回 <code>false</code> 标识请求失败后，会调用 <code>resolveResponseErrorMessage</code> 解析错误提示信息。</p><ul><li>【默认表格样式】错误信息会出现在表格内容区域内</li><li>【自定义 slot 】数据挂载在 slot-scope 的 <code>content-message</code> 属性上。</li></ul><p>例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">error_info</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">msg</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">未知错误</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="数据请求-自定义" tabindex="-1">数据请求 - 自定义 <a class="header-anchor" href="#数据请求-自定义" aria-label="Permalink to &quot;数据请求 - 自定义&quot;">​</a></h2><p>如果对于数据接口请求在发送前、接受后有特殊的处理流程，或者接口数据格式与规范不一致，可通过以下几个 props 对数据进行加工处理。</p><h3 id="requesthandler" tabindex="-1">requestHandler <a class="header-anchor" href="#requesthandler" aria-label="Permalink to &quot;requestHandler&quot;">​</a></h3><ul><li>type: <code>(requestData) =&gt; Promise&lt;data&gt;</code></li><li>default: <code>null</code></li></ul><p>自定义请求方法，需要返回 Promise ，该方法优先级最高。若设置了 <a href="#validateresponse"><code>validateResponse</code></a> 方法，亦会以返回的内容进行验证流程。</p><h3 id="transformrequestdata" tabindex="-1">transformRequestData <a class="header-anchor" href="#transformrequestdata" aria-label="Permalink to &quot;transformRequestData&quot;">​</a></h3><ul><li>type: <code>(requestData) =&gt; requestData</code></li><li>default: <code>null</code></li></ul><p>该方法可对接口发起请求参数在发送前作最后的更改，方法最终 return 的数据会作为提交参数。参数 <code>requestData</code> 包含搜索栏的所有数据，如果有开启分页还会包含 <code>page_index</code> 和 <code>page_size</code> 。</p><p>** 如果该方法显式的返回 <code>false</code> 则会阻止提交，可用于发起请求前进行参数验证等。**</p><h3 id="transformresponsedata" tabindex="-1">transformResponseData <a class="header-anchor" href="#transformresponsedata" aria-label="Permalink to &quot;transformResponseData&quot;">​</a></h3><ul><li>type: <code>(responseData) =&gt; responseData</code></li><li>default: <code>null</code></li></ul><p>对原始响应数据的加工方法，接收原始响应数据，方法处理后 return 的返回值会交由给 <code>contentDataMap</code> 进行映射。</p><p>一般用于接口响应的数据无法通过 <code>contentDataMap</code> 简单映射到需要的数据时，可使用该配置项对数据进行加工再返回。</p>`,116),t=[n];function p(r,c,i,d,u,F){return a(),s("div",null,t)}const D=e(o,[["render",p]]);export{y as __pageData,D as default};
